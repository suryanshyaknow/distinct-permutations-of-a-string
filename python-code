#We have to know the formula to calculate the distinct permutations viz. n!/ r1! r2! r3!....rn!
#n is the length of the given string.
#r1, r2, r3,.....rn will be the repeated appearances of the characters that have occured more than once.
#st is the variable name used for the given string.

st = input("Enter the string of which ya wanna the distinct permutations of arrangements of it's characters.)


#This goes on without saying that a factorial function will be needed!
def fact(n):
  fact = 1
  for i in range(2, n+1):
    fact = fact*i
  return fact
  
  
#A function to count the individual appearances of a single character.
def count(y, st, listy):
  x = len(st)
  ind = st[y] #ind is the individual character of which we have to count the appearances.
  county = 0 #the no. of times the individual character have appeared in the string.
  
  if ind not in listy: #means that whether the current character's appearances haven't been already counted!!!
    for i in range(y, x):
      if st[i] == ind:
        county += 1
        if ind not in listy: #to append the character into the list fot the first time to keep the track of already counted appearances of that very character.
          listy.append(ind)
  
  if county == 0: #If the character have appeared only once.
    return 1
  else: 
    return county
    
#Main function to give us all the possible distinct permutations!!!  
def GetArrangements(st):
  x = len(st)
  
  listy = [] #a list to track all the individual characters.

  #readying the factorial product of the denominator to rule out the same combinations to make sure that every arrangement is distinct.
  deno = 1
  for i in range(x):
    deno = fact(count(i, st, listy)) * deno
  
  print("The no. of distinct permutations of the inputted string is: ")
  return fact(x)/deno
  
 GetArrangements(st)
  
  
